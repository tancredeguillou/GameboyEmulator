/**
 * @file unit-test-cpu-dispatch.h
 * @brief Unit test for cpu dispatch functions, common part
 *
 * @author C. Hölzl, EPFL
 * @date 2019
 */

#define LOOP_ON(T) \
    for(size_t i_ = 0; i_ < (sizeof(T) / sizeof(*T)); ++i_)

#define ASSERT_EQ_NB_EL(T1, T2) \
    static_assert(sizeof(T1) / sizeof(*T1) == sizeof(T2) / sizeof(*T2), "Wrong Size in test tables")

#define CPU_BUS_V_AT(cpu,idx) \
    *((*(cpu).bus)[idx])

#define COMPONENT_FULL_BUS(bus,c)\
    ck_assert_int_eq(component_create(c, BUS_SIZE), ERR_NONE); \
    ck_assert_int_eq(bus_forced_plug(bus, c, 0, (addr_t)(BUS_SIZE-1),0), ERR_NONE); \

#define INIT_CPU(cpu, c) \
    bus_t bus = {0}; \
    ck_assert_int_eq(cpu_init(cpu), ERR_NONE); \
    ck_assert_int_eq(cpu_plug(cpu,&bus), ERR_NONE); \
    COMPONENT_FULL_BUS(bus,c)

#define INIT_RUN()\
    cpu_t cpu;\
    zero_init_var(cpu);\
    component_t c = {NULL, 0, 0};\
    INIT_CPU(&cpu, &c)

#define DO_RUN(cpu, ...) \
    instruction_t lu = __VA_ARGS__; \
    ck_assert_int_eq(cpu_dispatch(&lu, &cpu), ERR_NONE)

#define RUN_FOR_REG(cpu, reg, ...) \
    cpu_reg_set(&cpu, reg, dt[i_]);\
    DO_RUN(cpu,__VA_ARGS__)

#define END_RUN()\
    cpu_free(&cpu);\
    component_free(&c)

#define RUN_DISPATCH_ALU_HL(input_a, input_b, input_f, expected_v, expected_f, ...) \
    do{ \
        INIT_RUN();\
        LOOP_ON(input_f) {\
            cpu.A = input_a[i_];\
            cpu.F = input_f[i_];\
            cpu_HL_set(&cpu,0);\
            ck_assert_int_eq(cpu_write_at_HL(&cpu, input_b[i_]), ERR_NONE);\
            DO_RUN(cpu,__VA_ARGS__); \
            ck_assert_msg(cpu.A == expected_v[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => value 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
                          lu.opcode, i_, input_a[i_], input_b[i_],cpu.A, expected_v[i_]);\
            ck_assert_msg(cpu.F == expected_f[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => flag 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
                          lu.opcode, i_, input_a[i_], input_b[i_],cpu.F, expected_f[i_]);\
        }\
        END_RUN();\
    } while(0)

#define RUN_DISPATCH_ALU_N8(input_a, input_b, input_f, expected_v, expected_f, ...) \
    do{ \
        INIT_RUN();\
        LOOP_ON(input_f) {\
            cpu.A = input_a[i_];\
            cpu.F = input_f[i_];\
            cpu.PC = 0;\
            ck_assert_int_eq(cpu_write_at_idx(&cpu, (addr_t) (cpu.PC+1), input_b[i_]), ERR_NONE);\
            DO_RUN(cpu,__VA_ARGS__);\
        ck_assert_msg(cpu.A == expected_v[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => value 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
            lu.opcode, i_, input_a[i_], input_b[i_],cpu.A, expected_v[i_]);\
        ck_assert_msg(cpu.F == expected_f[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => flag 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
            lu.opcode, i_, input_a[i_], input_b[i_],cpu.F, expected_f[i_]);\
        }\
        END_RUN();\
    } while(0)


#define RUN_DISPATCH_ALU_R8(input_a, input_b, input_f, expected_v, expected_f, reg_k, ...) \
    do{ \
        INIT_RUN();\
        LOOP_ON(input_f) {\
            cpu.A = input_a[i_];\
            cpu.F = input_f[i_];\
            cpu_reg_set(&cpu, reg_k, input_b[i_]);\
            DO_RUN(cpu,__VA_ARGS__);\
        ck_assert_msg(cpu.A == expected_v[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => value 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
            lu.opcode, i_, input_a[i_], input_b[i_],cpu.A, expected_v[i_]);\
        ck_assert_msg(cpu.F == expected_f[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ", 0x%" PRIX8 ") => flag 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
            lu.opcode, i_, input_a[i_], input_b[i_],cpu.F, expected_f[i_]);\
        }\
        END_RUN();\
    } while(0)

#define RUN_DISPATCH_ALU_R8_S(input_a,  input_f, expected_v, expected_f, reg_k, ...) \
    do{ \
        INIT_RUN();\
        LOOP_ON(input_f) {\
            cpu.F = input_f[i_];\
            cpu_reg_set(&cpu, reg_k, input_a[i_]);\
            DO_RUN(cpu,__VA_ARGS__);\
            ck_assert_msg(cpu_reg_get(&cpu, reg_k) == lsb8(expected_v[i_]),"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ") => value 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
                lu.opcode, i_, input_a[i_], cpu_reg_get(&cpu, reg_k), lsb8(expected_v[i_]));\
            ck_assert_msg(cpu.F == expected_f[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX8 ") => flag 0x%" PRIX8 " (!= 0x%" PRIX8 ")",\
                lu.opcode, i_, input_a[i_], cpu.F, expected_f[i_]);\
        }\
        END_RUN();\
    } while(0)

#define RUN_DISPATCH_ALU_R16_S(input_a, input_f, expected_v, expected_f, reg_k, ...) \
    do{ \
        INIT_RUN();\
        LOOP_ON(input_f) {\
            cpu.F = input_f[i_];\
            cpu_reg_pair_SP_set(&cpu, reg_k, input_a[i_]);\
            DO_RUN(cpu,__VA_ARGS__);\
            ck_assert_msg(cpu_reg_pair_SP_get(&cpu, reg_k) == expected_v[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX16 ") => value 0x%" PRIX16 " (!= 0x%" PRIX16 ")",\
                lu.opcode, i_, input_a[i_], cpu_reg_pair_SP_get(&cpu, reg_k), expected_v[i_]);\
            ck_assert_msg(cpu.F == expected_f[i_],"Opcode 0x%" PRIX8 ", i=%d: (0x%" PRIX16 ") => flag 0x%" PRIX16 " (!= 0x%" PRIX16 ")",\
                lu.opcode, i_, input_a[i_], cpu.F, expected_f[i_]);\
        }\
        END_RUN();\
    } while(0)


//================================================================
//                  ALU-BIT-/CHG
//================================================================

#define BIT_IN_DATA    {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFF, 0x0F, 0xF0, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFF, 0x0F, 0xF0}
#define BIT_IN_FLAG    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}

#define BIT_OUT_FLAG_0 {0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x20, 0xA0, 0xB0, 0x30, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0x30, 0xB0}
#define BIT_OUT_FLAG_1 {0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x20, 0xA0, 0xB0, 0xB0, 0x30, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0x30, 0xB0}
#define BIT_OUT_FLAG_2 {0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x20, 0xA0, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0x30, 0xB0}
#define BIT_OUT_FLAG_3 {0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x20, 0xA0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0x30, 0xB0}
#define BIT_OUT_FLAG_4 {0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0x20, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0x30}
#define BIT_OUT_FLAG_5 {0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0xA0, 0x20, 0xA0, 0x20, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0xB0, 0x30, 0xB0, 0x30}
#define BIT_OUT_FLAG_6 {0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0xA0, 0x20, 0xA0, 0x20, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0xB0, 0x30, 0xB0, 0x30}
#define BIT_OUT_FLAG_7 {0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x20, 0x20, 0xA0, 0x20, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0x30, 0x30, 0xB0, 0x30}

#define CHG_OUT_DATA_0 {0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFE, 0x0E, 0xF0, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFE, 0x0E, 0xF0}
#define CHG_OUT_FLAG_0 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_1 {0x00, 0x01, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFD, 0x0D, 0xF0, 0x00, 0x01, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFD, 0x0D, 0xF0}
#define CHG_OUT_FLAG_1 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_2 {0x00, 0x01, 0x02, 0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFB, 0x0B, 0xF0, 0x00, 0x01, 0x02, 0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFB, 0x0B, 0xF0}
#define CHG_OUT_FLAG_2 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_3 {0x00, 0x01, 0x02, 0x04, 0x00, 0x10, 0x20, 0x40, 0x80, 0xF7, 0x07, 0xF0, 0x00, 0x01, 0x02, 0x04, 0x00, 0x10, 0x20, 0x40, 0x80, 0xF7, 0x07, 0xF0}
#define CHG_OUT_FLAG_3 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_4 {0x00, 0x01, 0x02, 0x04, 0x08, 0x00, 0x20, 0x40, 0x80, 0xEF, 0x0F, 0xE0, 0x00, 0x01, 0x02, 0x04, 0x08, 0x00, 0x20, 0x40, 0x80, 0xEF, 0x0F, 0xE0}
#define CHG_OUT_FLAG_4 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_5 {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x40, 0x80, 0xDF, 0x0F, 0xD0, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x40, 0x80, 0xDF, 0x0F, 0xD0}
#define CHG_OUT_FLAG_5 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_6 {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x80, 0xBF, 0x0F, 0xB0, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x80, 0xBF, 0x0F, 0xB0}
#define CHG_OUT_FLAG_6 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}
#define CHG_OUT_DATA_7 {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x7F, 0x0F, 0x70, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x7F, 0x0F, 0x70}
#define CHG_OUT_FLAG_7 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}

//================================================================
//                  CMP
//================================================================

#define CP_IN_DATA_A    {0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x08, 0x08, 0x00, 0x00, 0x01, 0x01, 0xEF, 0x80, 0xFF, 0x0F, 0x00, 0x00, 0x01, 0x01, 0xEF, 0x80, 0xFF, 0x0F}
#define CP_IN_DATA_B    {0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x08, 0x08, 0x00, 0x01, 0x00, 0x0F, 0x01, 0x80, 0xFF, 0xF1, 0x00, 0x01, 0x00, 0x0F, 0x01, 0x80, 0xFF, 0xF1}
#define CP_IN_FLAG      {0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}

#define CP_OUT_DATA     {0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x08, 0x08, 0x00, 0x00, 0x01, 0x01, 0xEF, 0x80, 0xFF, 0x0F, 0x00, 0x00, 0x01, 0x01, 0xEF, 0x80, 0xFF, 0x0F}
#define CP_OUT_FLAG     {0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x70, 0x40, 0x70, 0x40, 0xC0, 0xC0, 0x50, 0xC0, 0x70, 0x40, 0x70, 0x40, 0xC0, 0xC0, 0x50}
#define CP_OUT_S_FLAG   {0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0}

// ================================================================
// ROT DATA

#define ROT_IN_DATA      {0x00, 0x00, 0x0F, 0xFF, 0x03, 0x00, 0xFF, 0xFE, 0x01, 0x80, 0x00, 0x01, 0x10, 0x80, 0x08}
#define ROT_IN_FLAG      {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}

#define ROT_OUT_L_DATA   {0x00, 0x01, 0x1E, 0xFE, 0x06, 0x00, 0xFF, 0xFC, 0x02, 0x00, 0x01, 0x03, 0x21, 0x01, 0x11}
#define ROT_OUT_L_FLAG   {0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00}
#define ROT_OUT_LZ_FLAG  {0x80, 0x00, 0x00, 0x10, 0x00, 0x80, 0x10, 0x10, 0x00, 0x90, 0x00, 0x00, 0x00, 0x10, 0x00}

#define ROT_OUT_R_DATA   {0x00, 0x80, 0x07, 0x7F, 0x01, 0x00, 0xFF, 0x7F, 0x00, 0x40, 0x80, 0x80, 0x88, 0xC0, 0x84}
#define ROT_OUT_R_FLAG   {0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00}
#define ROT_OUT_RZ_FLAG  {0x80, 0x00, 0x10, 0x10, 0x10, 0x80, 0x10, 0x00, 0x90, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00}

#define ROT_OUT_LC_DATA  {0x00, 0x00, 0x1E, 0xFF, 0x06, 0x00, 0xFF, 0xFD, 0x02, 0x01, 0x00, 0x02, 0x20, 0x01, 0x10}
#define ROT_OUT_LC_FLAG  {0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00}
#define ROT_OUT_LCZ_FLAG {0x80, 0x80, 0x00, 0x10, 0x00, 0x80, 0x10, 0x10, 0x00, 0x10, 0x80, 0x00, 0x00, 0x10, 0x00}

#define ROT_OUT_RC_DATA  {0x00, 0x00, 0x87, 0xFF, 0x81, 0x00, 0xFF, 0x7F, 0x80, 0x40, 0x00, 0x80, 0x08, 0x40, 0x04}
#define ROT_OUT_RC_FLAG  {0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00}
#define ROT_OUT_RCZ_FLAG {0x80, 0x80, 0x10, 0x10, 0x10, 0x80, 0x10, 0x00, 0x10, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00}

// ======================================================================
// SHFT DATA
#define SHFT_IN_DATA      {0x00, 0x00, 0x0F, 0xFF, 0x03, 0x00, 0xFF, 0xFE, 0x01, 0x02, 0x10, 0x80, 0x00, 0x01, 0x10, 0x08, 0x80}
#define SHFT_IN_FLAG      {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0}

#define SHFT_OUT_L_DATA   {0x00, 0x00, 0x1E, 0xFE, 0x06, 0x00, 0xFE, 0xFC, 0x02, 0x04, 0x20, 0x00, 0x00, 0x02, 0x20, 0x10, 0x00}
#define SHFT_OUT_L_FLAG   {0x80, 0x80, 0x00, 0x10, 0x00, 0x80, 0x10, 0x10, 0x00, 0x00, 0x00, 0x90, 0x80, 0x00, 0x00, 0x00, 0x90}

#define SHFT_OUT_R_DATA   {0x00, 0x00, 0x07, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0x08, 0xC0, 0x00, 0x00, 0x08, 0x04, 0xC0}
#define SHFT_OUT_R_FLAG   {0x80, 0x80, 0x10, 0x10, 0x10, 0x80, 0x10, 0x00, 0x90, 0x00, 0x00, 0x00, 0x80, 0x90, 0x00, 0x00, 0x00}

#define SHFT_OUT_RL_DATA  {0x00, 0x00, 0x07, 0x7F, 0x01, 0x00, 0x7F, 0x7F, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x08, 0x04, 0x40}
#define SHFT_OUT_RL_FLAG  {0x80, 0x80, 0x10, 0x10, 0x10, 0x80, 0x10, 0x00, 0x90, 0x00, 0x00, 0x00, 0x80, 0x90, 0x00, 0x00, 0x00}

